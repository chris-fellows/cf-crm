@page "/contacts/edit"
@using Microsoft.EntityFrameworkCore
@using CFCRMCommon.Models
@inject IDbContextFactory<CFCRM.Data.CFCRMContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Contact</h2>
<hr />
@if (Contact is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Contact" OnValidSubmit="UpdateContact" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Contact.Id" value="@Contact.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Contact.FirstName" class="form-control" />
                    <ValidationMessage For="() => Contact.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Contact.LastName" class="form-control" />
                    <ValidationMessage For="() => Contact.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="jobtitle" class="form-label">JobTitle:</label>
                    <InputText id="jobtitle" @bind-Value="Contact.JobTitle" class="form-control" />
                    <ValidationMessage For="() => Contact.JobTitle" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="jobtypeid" class="form-label">JobTypeId:</label>
                    <InputText id="jobtypeid" @bind-Value="Contact.JobTypeId" class="form-control" />
                    <ValidationMessage For="() => Contact.JobTypeId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Contact.Email" class="form-control" />
                    <ValidationMessage For="() => Contact.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="notes" class="form-label">Notes:</label>
                    <InputText id="notes" @bind-Value="Contact.Notes" class="form-control" />
                    <ValidationMessage For="() => Contact.Notes" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="accountid" class="form-label">AccountId:</label>
                    <InputText id="accountid" @bind-Value="Contact.AccountId" class="form-control" />
                    <ValidationMessage For="() => Contact.AccountId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="active" class="form-label">Active:</label>
                    <InputCheckbox id="active" @bind-Value="Contact.Active" class="form-check-input" />
                    <ValidationMessage For="() => Contact.Active" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/contacts">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Id { get; set; }

    [SupplyParameterFromForm]
    private Contact? Contact { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Contact ??= await context.Contact.FirstOrDefaultAsync(m => m.Id == Id);

        if (Contact is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateContact()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Contact!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ContactExists(Contact!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/contacts");
    }

    private bool ContactExists(string id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Contact.Any(e => e.Id == id);
    }
}
